{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FileSystemPlugin","pseudoFileSystemPlugin","App","Component","showMsg","componentDidMount","window","$crisp","CRISP_WEBSITE_ID","d","document","s","createElement","src","async","getElementsByTagName","appendChild","render","style","display","justifyContent","alignItems","height","color","backgroundColor","barColor","plugins","fontWeight","fontSize","fontFamily","commands","open","showmsg","this","popup","alert","descriptions","msg","closedTitle","closedMessage","startState","hideTopBar","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAKA,MAAMA,E,MAAmBC,KACzB,MAAMC,UAAYC,YAAW,eAAD,oBAgBxBC,QAAU,IAAM,eAdhBC,oBACEC,OAAOC,OAAS,GAChBD,OAAOE,iBAAmB,uCAE1B,WACE,IAAIC,EAAIC,SACJC,EAAIF,EAAEG,cAAc,UAExBD,EAAEE,IAAM,iCACRF,EAAEG,MAAQ,EACVL,EAAEM,qBAAqB,QAAQ,GAAGC,YAAYL,GANhD,GAYFM,SACE,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UAGV,kBAAC,IAAD,CACEC,MAAM,QACNC,gBAAgB,UAChBC,SAAS,QACTC,QAAS,CACP1B,GAEFkB,MAAO,CAAES,WAAY,OAAQC,SAAU,QAASC,WAAY,SAC5DC,SAAU,CACR,WAAY,IAAMxB,OAAOyB,KAAK,+BAAgC,SAC9D,WAAY,IAAMzB,OAAOyB,KAAK,+BAAgC,SAC9DC,QAASC,KAAK7B,QACd8B,MAAO,IAAMC,MAAM,4JAErBC,aAAc,CACZ,WAAY,0BACZ,WAAY,2BACZJ,QAAS,uBACTG,MAAO,QAASD,MAAO,SAEzBG,IAAI,iDACJC,YAAY,2DACZC,cAAc,mCACdC,WAAW,OACXC,WAAW,WAORvC,QCpDKwC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCbNC,IAAS7B,OAAO,kBAAC,EAAD,MAASP,SAASqC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.601d2447.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// https://github.com/nitin42/terminal-in-react\r\nimport Terminal from 'terminal-in-react';\r\n// https://github.com/jcgertig/terminal-in-react-pseudo-file-system-plugin\r\nimport pseudoFileSystemPlugin from 'terminal-in-react-pseudo-file-system-plugin';\r\nconst FileSystemPlugin = pseudoFileSystemPlugin();\r\nclass App extends Component {\r\n  /* Crisp chat */\r\n    componentDidMount () {\r\n      window.$crisp = [];\r\n      window.CRISP_WEBSITE_ID = \"862896c7-d3fb-40d2-89cd-57ac29701882\";\r\n  \r\n      (function() {\r\n        var d = document;\r\n        var s = d.createElement(\"script\");\r\n  \r\n        s.src = \"https://client.crisp.chat/l.js\";\r\n        s.async = 1;\r\n        d.getElementsByTagName(\"head\")[0].appendChild(s);\r\n      })();\r\n     };\r\n\r\n    showMsg = () => 'Hello World!';\r\n  \r\n    render() {\r\n      return (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            height: \"100vh\"\r\n          }}\r\n        >\r\n          <Terminal\r\n            color='green'\r\n            backgroundColor='#373b41'\r\n            barColor='black'\r\n            plugins={[\r\n              FileSystemPlugin,\r\n            ]}\r\n            style={{ fontWeight: \"bold\", fontSize: \"1.1em\", fontFamily: \"VT323\" }}\r\n            commands={{\r\n              'ein-blog': () => window.open('https://blog.einsoft.com.br/', '_self'),\r\n              'ein-mini': () => window.open('https://mini.einsoft.com.br/', '_self'),\r\n              showmsg: this.showMsg,\r\n              popup: () => alert('▂▃▅▇█▓▒░۩۞۩ ?¿?OK?¿? ۩۞۩░▒▓█▇▅▃▂2.0')\r\n            }}\r\n            descriptions={{\r\n              'ein-blog': '» opens Einsoft Blog',\r\n              'ein-mini': '» sometimes NSFW bro!',\r\n              showmsg: '» shows a message',\r\n              alert: 'alert', popup: 'alert'\r\n            }}\r\n            msg='Einsoft Microsystems - para ajuda digite: help'\r\n            closedTitle='Terminal Fechado (não tem mais nada para fazer aqui!)'\r\n            closedMessage='Para reabrir, clique no ícone'\r\n            startState='open'\r\n            hideTopBar='true'\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default App;","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();  \r\n"],"sourceRoot":""}